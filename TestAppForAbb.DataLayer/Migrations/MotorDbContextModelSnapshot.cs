// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestAppForAbb.DataLayer.Repository;

namespace TestAppForAbb.DataLayer.Migrations
{
    [DbContext(typeof(MotorDbContext))]
    partial class MotorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestAppForAbb.Core.Models.CombustionMotor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("FuelConsumption")
                        .HasColumnType("float");

                    b.Property<double>("MaxTorque")
                        .HasColumnType("float");

                    b.Property<int>("MotorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotorId");

                    b.ToTable("CombustionMotors");
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.CurrentMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Current")
                        .HasColumnType("float");

                    b.Property<int>("ElectricMotorId")
                        .HasColumnType("int");

                    b.Property<int>("MeasureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElectricMotorId");

                    b.HasIndex("MeasureId");

                    b.ToTable("CurrentMeasures");
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.ElectricMotor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Current")
                        .HasColumnType("float");

                    b.Property<int>("MotorId")
                        .HasColumnType("int");

                    b.Property<double>("Voltage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MotorId");

                    b.ToTable("ElectricMotors");
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.HydraulicMotor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Displacement")
                        .HasColumnType("float");

                    b.Property<double>("MaxPressure")
                        .HasColumnType("float");

                    b.Property<int>("MotorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotorId");

                    b.ToTable("HydraulicMotors");
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.Motor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("MaxPower")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Motors");
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.PressureMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HydraulicMotorId")
                        .HasColumnType("int");

                    b.Property<int>("MeasureId")
                        .HasColumnType("int");

                    b.Property<double>("Pressure")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HydraulicMotorId");

                    b.HasIndex("MeasureId");

                    b.ToTable("PressureMeasures");
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.TorqueMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CombustionMotorId")
                        .HasColumnType("int");

                    b.Property<int>("MeasureId")
                        .HasColumnType("int");

                    b.Property<double>("Torque")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CombustionMotorId");

                    b.HasIndex("MeasureId");

                    b.ToTable("TorqueMeasures");
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.CombustionMotor", b =>
                {
                    b.HasOne("TestAppForAbb.Core.Models.Motor", "Motor")
                        .WithMany("CombustionMotors")
                        .HasForeignKey("MotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.CurrentMeasure", b =>
                {
                    b.HasOne("TestAppForAbb.Core.Models.ElectricMotor", "ElectricMotor")
                        .WithMany("CurrentMeasures")
                        .HasForeignKey("ElectricMotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAppForAbb.Core.Models.Measure", "Measure")
                        .WithMany("CurrentMeasures")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.ElectricMotor", b =>
                {
                    b.HasOne("TestAppForAbb.Core.Models.Motor", "Motor")
                        .WithMany("ElectricMotors")
                        .HasForeignKey("MotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.HydraulicMotor", b =>
                {
                    b.HasOne("TestAppForAbb.Core.Models.Motor", "Motor")
                        .WithMany("HydraulicMotors")
                        .HasForeignKey("MotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.PressureMeasure", b =>
                {
                    b.HasOne("TestAppForAbb.Core.Models.HydraulicMotor", "HydraulicMotor")
                        .WithMany("PressureMeasures")
                        .HasForeignKey("HydraulicMotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAppForAbb.Core.Models.Measure", "Measure")
                        .WithMany("PressureMeasures")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAppForAbb.Core.Models.TorqueMeasure", b =>
                {
                    b.HasOne("TestAppForAbb.Core.Models.CombustionMotor", "CombustionMotor")
                        .WithMany("TorqueMeasures")
                        .HasForeignKey("CombustionMotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAppForAbb.Core.Models.Measure", "Measure")
                        .WithMany("TorqueMeasures")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
